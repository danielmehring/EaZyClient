package de.Exe.Modules;

import org.lwjgl.input.Keyboard;
import org.lwjgl.opengl.GL11;

import com.darkmagician6.eventapi.EventManager;
import com.darkmagician6.eventapi.EventTarget;

import de.Exe.Event.EventSendPacket;
import de.Exe.Module.Category;
import de.Exe.Module.Module;
import de.Exe.Utils.EntityUtil;
import net.minecraft.block.Block;
import net.minecraft.block.BlockAir;
import net.minecraft.block.BlockGlass;
import net.minecraft.block.BlockStainedGlass;
import net.minecraft.client.renderer.GlStateManager;
import net.minecraft.client.renderer.RenderGlobal;
import net.minecraft.network.play.client.C00PacketKeepAlive;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.util.BlockPos;
import net.minecraft.util.MovingObjectPosition.MovingObjectType;

public class GommeClickTP extends Module {

	public GommeClickTP() {
		super("GommeTeleport", Keyboard.KEY_R, Category.Player);

	}

	public static boolean isTpProgress;
	public BlockPos tpPos;
	public int delay = 0;

	public void onPreUpdate() {
		if (!this.getState())
			return;

		if (mc.gameSettings.keyBindAttack.pressed) {
			if ((mc.objectMouseOver != null && mc.objectMouseOver.typeOfHit != MovingObjectType.ENTITY) && delay >= 20
					&& tpPos == null && !(EntityUtil.rayTrace(9001, mc.timer.renderPartialTicks) == null)
					&& mc.thePlayer.movementInput.sneak
					&& EntityUtil.rayTrace(9001, mc.timer.renderPartialTicks).typeOfHit == MovingObjectType.BLOCK
					&& (canTeleport(EntityUtil.rayTrace(9001, mc.timer.renderPartialTicks).func_178782_a()) != -1)) {
				tpPos = new BlockPos(EntityUtil.rayTrace(9001, mc.timer.renderPartialTicks).func_178782_a().getX(),
						EntityUtil.rayTrace(9001, mc.timer.renderPartialTicks).func_178782_a().getY()
								+ canTeleport(EntityUtil.rayTrace(9001, mc.timer.renderPartialTicks).func_178782_a()),
						EntityUtil.rayTrace(9001, mc.timer.renderPartialTicks).func_178782_a().getZ());
				mc.thePlayer.setPosition(tpPos.getX() + 0.5, tpPos.getY(), tpPos.getZ() + 0.5);

				mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(tpPos.getX() + 0.5,
						tpPos.getY(), tpPos.getZ() + 0.5, false));
				int i = 88;
				int ii = 0;
				while (ii < i) {
					mc.thePlayer.sendQueue.addToSendQueue(new C00PacketKeepAlive());
					++ii;
				}

				isTpProgress = true;
				delay = 0;
			}
		}

		delay++;

		if (isTpProgress && tpPos != null && delay >= 5) {
			isTpProgress = false;
			tpPos = null;
		}

		super.onUpdate();
	}

	public int canTeleport(BlockPos asd) {
		Block sel0 = mc.theWorld.getBlockState(asd).getBlock();
		Block sel1 = mc.theWorld.getBlockState(new BlockPos(asd.getX(), asd.getY() + 1, asd.getZ())).getBlock();
		Block sel2 = mc.theWorld.getBlockState(new BlockPos(asd.getX(), asd.getY() + 2, asd.getZ())).getBlock();

		if (sel0.isFullBlock()) {
			if (!sel1.isFullBlock() && !sel2.isFullBlock())
				return 1;
			else
				return -1;
		} else {
			if (sel0 instanceof BlockGlass || sel0 instanceof BlockStainedGlass)
				return 1;
			else if (!sel1.isFullBlock())
				return 0;
			else
				return -1;
		}

	}

	@Override
	public void onRender() {
		if (!this.getState())
			return;

		if (delay >= 20 && tpPos != null)
			return;

		BlockPos asd = EntityUtil.rayTrace(9001, mc.timer.renderPartialTicks).func_178782_a();
		Block selectBlock = mc.theWorld.getBlockState(asd).getBlock();

		if (selectBlock instanceof BlockAir)
			return;

		int color = -1;

		if ((canTeleport(asd) != -1))
			color = -12386305;
		else
			color = -48574;

		GlStateManager.enableBlend();
		GlStateManager.tryBlendFuncSeparate(770, 771, 1, 0);
		GL11.glLineWidth(2.0F);
		GlStateManager.func_179090_x();
		GlStateManager.depthMask(false);

		selectBlock.setBlockBoundsBasedOnState(mc.theWorld, asd);
		double var8 = mc.thePlayer.lastTickPosX
				+ (mc.thePlayer.posX - mc.thePlayer.lastTickPosX) * mc.timer.renderPartialTicks;
		double var10 = mc.thePlayer.lastTickPosY
				+ (mc.thePlayer.posY - mc.thePlayer.lastTickPosY) * mc.timer.renderPartialTicks;
		double var12 = mc.thePlayer.lastTickPosZ
				+ (mc.thePlayer.posZ - mc.thePlayer.lastTickPosZ) * mc.timer.renderPartialTicks;
		RenderGlobal.drawOutlinedBoundingBox(selectBlock.getSelectedBoundingBox(mc.theWorld, asd)
				.expand(0.0020000000949949026D, 0.0020000000949949026D, 0.0020000000949949026D)
				.offset(-var8, -var10, -var12), color);

		GlStateManager.depthMask(true);
		GlStateManager.func_179098_w();
		GlStateManager.disableBlend();

		super.onRender();
	}

	public void onEnable() {

	}

	public void onDisable() {
		tpPos = null;
		isTpProgress = false;
		super.onDisable();
	}

}
