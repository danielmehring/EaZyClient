package me.EaZy.client.modules;

import java.util.Arrays;
import java.util.List;

import com.darkmagician6.eventapi.EventManager;
import com.darkmagician6.eventapi.EventTarget;

import de.Hero.settings.Setting;
import me.EaZy.client.Category;
import me.EaZy.client.Module;
import me.EaZy.client.events.EventSafewalk;
import me.EaZy.client.main.Client;
import me.EaZy.client.modules.YesCheat.Mode;
import me.EaZy.client.utils.BlockUtils;
import me.EaZy.client.utils.OtherUtils;
import net.minecraft.block.Block;
import net.minecraft.client.Minecraft;
import net.minecraft.client.entity.EntityPlayerSP;
import net.minecraft.client.multiplayer.WorldClient;
import net.minecraft.init.Blocks;
import net.minecraft.item.ItemBlock;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C03PacketPlayer.C05PacketPlayerLook;
import net.minecraft.util.BlockPos;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.Vec3;

public class Scaffold extends Module {

	public static BlockData blockData = null;
	private boolean cooldown;
	private int expandCooldown;
	private final List<Block> blacklist = Arrays.asList(Blocks.air, Blocks.water, Blocks.flowing_water, Blocks.lava,
			Blocks.flowing_lava);
	// EnumFacing currentFacing = EnumFacing.DOWN;
	// boolean facingChanged = false;
	int blockCounter = 0;

	public Scaffold() {
		super("Scaffold", 44, "sc", Category.WORLD, "Place blocks\nunderneath you.");
		Client.setmgr.rSetting(new Setting("Expanded", this, false));
		Client.setmgr.rSetting(new Setting("Expand", this, 2.0f, 1.0f, 9.0f, true));
		Client.setmgr.rSetting(new Setting("SafeWalk", this, true));
		Client.setmgr.rSetting(new Setting("Silent", this, true));
	}

	@Override
	public String getRenderName() {
		return Client.setmgr.getSettingByName(this, "Expanded").getValBoolean()
				? "Scaffold [Expand:" + Client.setmgr.getSettingByName(this, "Expand").getValFloat() + "]" : "Scaffold";
	}

	@Override
	public void onEnable() {
		EventManager.register(this);
		Scaffold.blockData = null;
		super.onEnable();
	}

	@Override
	public void onDisable() {
		EventManager.unregister(this);
		if (mc.inGameHasFocus) {
			OtherUtils.setBindingAsInput(Minecraft.gameSettings.keyBindJump);
		} else {
			Minecraft.gameSettings.keyBindJump.pressed = false;
		}
		super.onDisable();
	}

	@EventTarget
	public void onWalking(final EventSafewalk event) {
		if (Client.setmgr.getSettingByName(this, "SafeWalk").getValBoolean()) {
			event.setShouldWalkSafely(true);
		}
	}

	@Override
	public void onUpdate() {

		if (!isToggled()) {
			if (togglecmd) {
				setToggled(true);
				onEnable();
			}
			return;
		}
		if (isToggled() && !togglecmd) {
			setToggled(false);
			onDisable();
			return;
		}

		// if (Minecraft.thePlayer.getHeldItem() == null ||
		// (Minecraft.thePlayer.getHeldItem() != null
		// && !(Minecraft.thePlayer.getHeldItem().getItem() instanceof
		// ItemBlock))) {
		// facingChanged = true;
		// return;
		// }
		if (Minecraft.thePlayer.getHeldItem() != null
				&& Minecraft.thePlayer.getHeldItem().getItem() instanceof ItemBlock) {
			if (!Client.setmgr.getSettingByName(this, "Expanded").getValBoolean()) {
				BlockPos blockBelow;
				blockData = null;
				if (Minecraft.thePlayer.getHeldItem() != null
						&& Minecraft.thePlayer.getHeldItem().getItem() instanceof ItemBlock
						&& Minecraft.theWorld
								.getBlockState(blockBelow = new BlockPos(Minecraft.thePlayer.posX,
										Minecraft.thePlayer.posY - 1.0, Minecraft.thePlayer.posZ))
								.getBlock() == Blocks.air
						&& (blockData = getBlockData(blockBelow)) != null) {
					if (YesCheat.enabled && YesCheat.mode == Mode.Gomme) {
						Minecraft.thePlayer.setSprinting(false);
						Minecraft.gameSettings.keyBindSprint.pressed = false;
					}
				}
			} else {
				final BlockPos blockBelow = new BlockPos(Minecraft.thePlayer.posX, Minecraft.thePlayer.posY - 1.0,
						Minecraft.thePlayer.posZ);
				if (Minecraft.theWorld.getBlockState(blockBelow).getBlock() == Blocks.air
						&& (blockData = getBlockData(blockBelow)) != null) {
					final float[] values = BlockUtils.getFacingRotations(blockData.position.getX(),
							blockData.position.getY(), blockData.position.getZ(), blockData.face);
					Minecraft.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C05PacketPlayerLook(values[0],
							values[1], Minecraft.thePlayer.onGround));
				}
			}
		}
		if (Minecraft.thePlayer.getHeldItem() != null
				&& Minecraft.thePlayer.getHeldItem().getItem() instanceof ItemBlock) {
			if (Client.setmgr.getSettingByName(this, "Expanded").getValBoolean()) {
				if (expandCooldown-- > 0) {
					return;
				}
				expandCooldown = 0;
				final EntityPlayerSP player = Minecraft.thePlayer;
				// if (player.getHeldItem() == null) {
				// currentFacing = EnumFacing.DOWN;
				// return;
				// }
				// if (!(player.getHeldItem().getItem() instanceof ItemBlock)) {
				// currentFacing = EnumFacing.DOWN;
				// return;
				// }
				final WorldClient world = Minecraft.theWorld;
				final EnumFacing faceing = player.getFacingDirection();
				final BlockPos playerBlock = new BlockPos(mc.func_175606_aa().posX,
						mc.func_175606_aa().getEntityBoundingBox().minY, mc.func_175606_aa().posZ);
				int i = 0;
				while (i < Client.setmgr.getSettingByName(this, "Expand").getValFloat()) {
					final BlockPos offset = playerBlock.add(0, -1, 0).offset(faceing, i);
					if (world.isAirBlock(offset)) {
						cooldown = false;
						PlaceBlock(offset, faceing);
						expandCooldown = 2;
						break;
					}
					++i;
				}
			}
		}
		if (Minecraft.thePlayer.getHeldItem() != null
				&& Minecraft.thePlayer.getHeldItem().getItem() instanceof ItemBlock) {
			if (!Client.setmgr.getSettingByName(this, "Expanded").getValBoolean()) {
				if (blockData == null) {
					return;
				}
				// if (currentFacing != blockData.face) {
				// currentFacing = blockData.face;
				// facingChanged = true;
				// }
				final float[] values = BlockUtils.getFacingRotations(blockData.position.getX(),
						blockData.position.getY(), blockData.position.getZ(), blockData.face);
				Minecraft.thePlayer.sendQueue
						.addToSendQueue(new C05PacketPlayerLook(values[0], values[1], Minecraft.thePlayer.onGround));
				Minecraft.rightClickDelayTimer = 0;
				if (Minecraft.playerController.placeBlock(Minecraft.thePlayer, Minecraft.theWorld,
						Minecraft.thePlayer.getHeldItem(), blockData.position, blockData.face,
						new Vec3(blockData.position.getX(), blockData.position.getY(), blockData.position.getZ()))) {
					if (Client.setmgr.getSettingByName(this, "Silent").getValBoolean()) {

					} else {
						Minecraft.thePlayer.swingItem();
					}
					blockCounter++;
				}
			}
		}
	}

	// @EventTarget
	// public void onSendPacket(final EventSendPacket e) {
	// if (e.getPacket() instanceof C05PacketPlayerLook) {
	// if (currentFacing == EnumFacing.DOWN) {
	// return;
	// }
	// if (!facingChanged) {
	// System.out.println("cancelled");
	// e.setCancelled(true);
	// } else {
	// System.out.println("sent");
	// facingChanged = false;
	// }
	// }
	// }

	public void PlaceBlock(BlockPos pos, final EnumFacing face) {
		if (!cooldown) {
			cooldown = true;
			if (face == EnumFacing.UP) {
				pos = pos.add(0, -1, 0);
			} else if (face == EnumFacing.NORTH) {
				pos = pos.add(0, 0, 1);
			} else if (face == EnumFacing.SOUTH) {
				pos = pos.add(0, 0, -1);
			} else if (face == EnumFacing.EAST) {
				pos = pos.add(-1, 0, 0);
			} else if (face == EnumFacing.WEST) {
				pos = pos.add(1, 0, 0);
			}
			if (Minecraft.thePlayer.getHeldItem() != null
					&& Minecraft.thePlayer.getHeldItem().getItem() instanceof ItemBlock) {
				if (Minecraft.playerController.placeBlock(Minecraft.thePlayer, Minecraft.theWorld,
						Minecraft.thePlayer.getHeldItem(), pos, face,
						new Vec3(pos.getX() + Math.random(), pos.getY() + Math.random(), pos.getZ() + Math.random()))) {
					Minecraft.thePlayer.swingItem();
				}
			}
		}
	}

	public BlockData getBlockData(final BlockPos pos) {
		if (!blacklist.contains(Minecraft.theWorld.getBlockState(pos.add(0, -1, 0)).getBlock())) {
			return new BlockData(pos.add(0, -1, 0), EnumFacing.UP);
		}
		if (!blacklist.contains(Minecraft.theWorld.getBlockState(pos.add(-1, 0, 0)).getBlock())) {
			return new BlockData(pos.add(-1, 0, 0), EnumFacing.EAST);
		}
		if (!blacklist.contains(Minecraft.theWorld.getBlockState(pos.add(1, 0, 0)).getBlock())) {
			return new BlockData(pos.add(1, 0, 0), EnumFacing.WEST);
		}
		if (!blacklist.contains(Minecraft.theWorld.getBlockState(pos.add(0, 0, -1)).getBlock())) {
			return new BlockData(pos.add(0, 0, -1), EnumFacing.SOUTH);
		}
		if (!blacklist.contains(Minecraft.theWorld.getBlockState(pos.add(0, 0, 1)).getBlock())) {
			return new BlockData(pos.add(0, 0, 1), EnumFacing.NORTH);
		}
		return null;
	}

	private class BlockData {
		public BlockPos position;
		public EnumFacing face;

		public BlockData(final BlockPos position, final EnumFacing face) {
			this.position = position;
			this.face = face;
		}
	}

}
