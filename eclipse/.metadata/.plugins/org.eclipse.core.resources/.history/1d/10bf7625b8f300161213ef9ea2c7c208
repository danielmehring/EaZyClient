package de.Hero.clickgui.elements.menu;

import java.awt.Color;

import de.Hero.clickgui.elements.Element;
import de.Hero.clickgui.elements.ModuleButton;
import de.Hero.clickgui.util.FontUtil;
import de.Hero.settings.Setting;
import me.EaZy.client.main.Client;
import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.Gui;

/**
 * Made by HeroCode it's free to use but you have to credit me
 *
 * @author HeroCode
 */
public class ElementCheckBox extends Element {
	/*
	 * Konstrukor
	 */
	public ElementCheckBox(final ModuleButton iparent, final Setting iset) {
		parent = iparent;
		set = iset;
		super.setup();
	}

	/*
	 * Rendern des Elements
	 */
	@Override
	public void drawScreen(final int mouseX, final int mouseY, final float partialTicks) {
		final Color temp = Client.getColor(0l);
		new Color(temp.getRed(), temp.getGreen(), temp.getBlue(), 200).getRGB();

		/*
		 * Die Box und Umrandung rendern
		 */
		Gui.drawRect(x, y, x + width, y + height, 0xff1a1a1a);

		/*
		 * Titel und Checkbox rendern.
		 */
		FontUtil.drawString(setstrg, (float) x + (float) width - FontUtil.getStringWidth(setstrg),
				(float) y + FontUtil.getFontHeight() / 2 - 0.5f, 0xffffffff);
		Gui.drawRect(x + 1, y + 2, x + 12, y + 13, set.getValBoolean() ? 0xffffffff : 0xff000000);
		Minecraft.getMinecraft().fontRendererObj.drawString("\u2714", (int) x + 3, (int) y + 3,
				set.getValBoolean() ? 0xff000000 : 0xffffffff);
		if (isCheckHovered(mouseX, mouseY)) {
			// Gui.drawRect(x + 1, y + 2, x + 12, y + 13, 0x55111111);
		}
	}

	/*
	 * 'true' oder 'false' bedeutet hat der Nutzer damit interagiert und sollen
	 * alle anderen Versuche der Interaktion abgebrochen werden?
	 */
	@Override
	public boolean mouseClicked(final int mouseX, final int mouseY, final int mouseButton) {
		if (mouseButton == 0 && isCheckHovered(mouseX, mouseY)) {
			set.setValBoolean(!set.getValBoolean());
			return true;
		}

		return super.mouseClicked(mouseX, mouseY, mouseButton);
	}

	/*
	 * Einfacher HoverCheck, benötigt damit die Value geändert werden kann
	 */
	public boolean isCheckHovered(final int mouseX, final int mouseY) {
		return mouseX >= x + 1 && mouseX <= x + 12 && mouseY >= y + 2 && mouseY <= y + 13;
	}
}
