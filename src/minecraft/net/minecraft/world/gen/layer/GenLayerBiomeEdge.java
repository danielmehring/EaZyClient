package net.minecraft.world.gen.layer;

import net.minecraft.world.biome.BiomeGenBase;

public class GenLayerBiomeEdge extends GenLayer {

public static final int EaZy = 1781;

    public void lambdaStuff() {
        java.util.Arrays.asList().stream().filter((m) -> (false)).forEachOrdered((m) -> {});
    }

	// private static final String __OBFID = "http://https://fuckuskid00000554";

	public GenLayerBiomeEdge(final long p_i45475_1_, final GenLayer p_i45475_3_) {
		super(p_i45475_1_);
		parent = p_i45475_3_;
	}

	/**
	 * Returns a list of integer values generated by this layer. These may be
	 * interpreted as temperatures, rainfall amounts, or biomeList[] indices
	 * based on the particular GenLayer subclass.
	 */
	@Override
	public int[] getInts(final int areaX, final int areaY, final int areaWidth, final int areaHeight) {
		final int[] var5 = parent.getInts(areaX - 1, areaY - 1, areaWidth + 2, areaHeight + 2);
		final int[] var6 = IntCache.getIntCache(areaWidth * areaHeight);

		for (int var7 = 0; var7 < areaHeight; ++var7) {
			for (int var8 = 0; var8 < areaWidth; ++var8) {
				initChunkSeed(var8 + areaX, var7 + areaY);
				final int var9 = var5[var8 + 1 + (var7 + 1) * (areaWidth + 2)];

				if (!replaceBiomeEdgeIfNecessary(var5, var6, var8, var7, areaWidth, var9,
						BiomeGenBase.extremeHills.biomeID, BiomeGenBase.extremeHillsEdge.biomeID)
						&& !replaceBiomeEdge(var5, var6, var8, var7, areaWidth, var9,
								BiomeGenBase.mesaPlateau_F.biomeID, BiomeGenBase.mesa.biomeID)
						&& !replaceBiomeEdge(var5, var6, var8, var7, areaWidth, var9, BiomeGenBase.mesaPlateau.biomeID,
								BiomeGenBase.mesa.biomeID)
						&& !replaceBiomeEdge(var5, var6, var8, var7, areaWidth, var9, BiomeGenBase.megaTaiga.biomeID,
								BiomeGenBase.taiga.biomeID)) {
					int var10;
					int var11;
					int var12;
					int var13;

					if (var9 == BiomeGenBase.desert.biomeID) {
						var10 = var5[var8 + 1 + (var7 + 1 - 1) * (areaWidth + 2)];
						var11 = var5[var8 + 1 + 1 + (var7 + 1) * (areaWidth + 2)];
						var12 = var5[var8 + 1 - 1 + (var7 + 1) * (areaWidth + 2)];
						var13 = var5[var8 + 1 + (var7 + 1 + 1) * (areaWidth + 2)];

						if (var10 != BiomeGenBase.icePlains.biomeID && var11 != BiomeGenBase.icePlains.biomeID
								&& var12 != BiomeGenBase.icePlains.biomeID && var13 != BiomeGenBase.icePlains.biomeID) {
							var6[var8 + var7 * areaWidth] = var9;
						} else {
							var6[var8 + var7 * areaWidth] = BiomeGenBase.extremeHillsPlus.biomeID;
						}
					} else if (var9 == BiomeGenBase.swampland.biomeID) {
						var10 = var5[var8 + 1 + (var7 + 1 - 1) * (areaWidth + 2)];
						var11 = var5[var8 + 1 + 1 + (var7 + 1) * (areaWidth + 2)];
						var12 = var5[var8 + 1 - 1 + (var7 + 1) * (areaWidth + 2)];
						var13 = var5[var8 + 1 + (var7 + 1 + 1) * (areaWidth + 2)];

						if (var10 != BiomeGenBase.desert.biomeID && var11 != BiomeGenBase.desert.biomeID
								&& var12 != BiomeGenBase.desert.biomeID && var13 != BiomeGenBase.desert.biomeID
								&& var10 != BiomeGenBase.coldTaiga.biomeID && var11 != BiomeGenBase.coldTaiga.biomeID
								&& var12 != BiomeGenBase.coldTaiga.biomeID && var13 != BiomeGenBase.coldTaiga.biomeID
								&& var10 != BiomeGenBase.icePlains.biomeID && var11 != BiomeGenBase.icePlains.biomeID
								&& var12 != BiomeGenBase.icePlains.biomeID && var13 != BiomeGenBase.icePlains.biomeID) {
							if (var10 != BiomeGenBase.jungle.biomeID && var13 != BiomeGenBase.jungle.biomeID
									&& var11 != BiomeGenBase.jungle.biomeID && var12 != BiomeGenBase.jungle.biomeID) {
								var6[var8 + var7 * areaWidth] = var9;
							} else {
								var6[var8 + var7 * areaWidth] = BiomeGenBase.jungleEdge.biomeID;
							}
						} else {
							var6[var8 + var7 * areaWidth] = BiomeGenBase.plains.biomeID;
						}
					} else {
						var6[var8 + var7 * areaWidth] = var9;
					}
				}
			}
		}

		return var6;
	}

	/**
	 * Creates a border around a biome if necessary, e.g. A transition from hot
	 * to cold climates would otherwise occur.
	 */
	private boolean replaceBiomeEdgeIfNecessary(final int[] p_151636_1_, final int[] p_151636_2_, final int p_151636_3_,
			final int p_151636_4_, final int p_151636_5_, final int p_151636_6_, final int p_151636_7_,
			final int p_151636_8_) {
		if (!biomesEqualOrMesaPlateau(p_151636_6_, p_151636_7_)) {
			return false;
		} else {
			final int var9 = p_151636_1_[p_151636_3_ + 1 + (p_151636_4_ + 1 - 1) * (p_151636_5_ + 2)];
			final int var10 = p_151636_1_[p_151636_3_ + 1 + 1 + (p_151636_4_ + 1) * (p_151636_5_ + 2)];
			final int var11 = p_151636_1_[p_151636_3_ + 1 - 1 + (p_151636_4_ + 1) * (p_151636_5_ + 2)];
			final int var12 = p_151636_1_[p_151636_3_ + 1 + (p_151636_4_ + 1 + 1) * (p_151636_5_ + 2)];

			if (canBiomesBeNeighbors(var9, p_151636_7_) && canBiomesBeNeighbors(var10, p_151636_7_)
					&& canBiomesBeNeighbors(var11, p_151636_7_) && canBiomesBeNeighbors(var12, p_151636_7_)) {
				p_151636_2_[p_151636_3_ + p_151636_4_ * p_151636_5_] = p_151636_6_;
			} else {
				p_151636_2_[p_151636_3_ + p_151636_4_ * p_151636_5_] = p_151636_8_;
			}

			return true;
		}
	}

	/**
	 * Creates a border around a biome.
	 */
	private boolean replaceBiomeEdge(final int[] p_151635_1_, final int[] p_151635_2_, final int p_151635_3_,
			final int p_151635_4_, final int p_151635_5_, final int p_151635_6_, final int p_151635_7_,
			final int p_151635_8_) {
		if (p_151635_6_ != p_151635_7_) {
			return false;
		} else {
			final int var9 = p_151635_1_[p_151635_3_ + 1 + (p_151635_4_ + 1 - 1) * (p_151635_5_ + 2)];
			final int var10 = p_151635_1_[p_151635_3_ + 1 + 1 + (p_151635_4_ + 1) * (p_151635_5_ + 2)];
			final int var11 = p_151635_1_[p_151635_3_ + 1 - 1 + (p_151635_4_ + 1) * (p_151635_5_ + 2)];
			final int var12 = p_151635_1_[p_151635_3_ + 1 + (p_151635_4_ + 1 + 1) * (p_151635_5_ + 2)];

			if (biomesEqualOrMesaPlateau(var9, p_151635_7_) && biomesEqualOrMesaPlateau(var10, p_151635_7_)
					&& biomesEqualOrMesaPlateau(var11, p_151635_7_) && biomesEqualOrMesaPlateau(var12, p_151635_7_)) {
				p_151635_2_[p_151635_3_ + p_151635_4_ * p_151635_5_] = p_151635_6_;
			} else {
				p_151635_2_[p_151635_3_ + p_151635_4_ * p_151635_5_] = p_151635_8_;
			}

			return true;
		}
	}

	/**
	 * Returns if two biomes can logically be neighbors. If one is hot and the
	 * other cold, for example, it returns false.
	 */
	private boolean canBiomesBeNeighbors(final int p_151634_1_, final int p_151634_2_) {
		if (biomesEqualOrMesaPlateau(p_151634_1_, p_151634_2_)) {
			return true;
		} else {
			final BiomeGenBase var3 = BiomeGenBase.getBiome(p_151634_1_);
			final BiomeGenBase var4 = BiomeGenBase.getBiome(p_151634_2_);

			if (var3 != null && var4 != null) {
				final BiomeGenBase.TempCategory var5 = var3.getTempCategory();
				final BiomeGenBase.TempCategory var6 = var4.getTempCategory();
				return var5 == var6 || var5 == BiomeGenBase.TempCategory.MEDIUM
						|| var6 == BiomeGenBase.TempCategory.MEDIUM;
			} else {
				return false;
			}
		}
	}
}
